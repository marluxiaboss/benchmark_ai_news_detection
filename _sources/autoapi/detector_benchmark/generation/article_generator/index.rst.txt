detector_benchmark.generation.article_generator
===============================================

.. py:module:: detector_benchmark.generation.article_generator


Classes
-------

.. autoapisummary::

   detector_benchmark.generation.article_generator.ArticleGenerator


Module Contents
---------------

.. py:class:: ArticleGenerator(gen_model: detector_benchmark.generation.generator.LLMGenerator, gen_config: detector_benchmark.utils.configs.ModelConfig, gen_prompt_config: detector_benchmark.utils.configs.PromptConfig, max_sample_len: int, watermarking_scheme: detector_benchmark.watermark.auto_watermark.AutoWatermark = None)

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: gen_model


   .. py:attribute:: gen_prompt_config


   .. py:attribute:: gen_model_config


   .. py:attribute:: max_sample_len


   .. py:attribute:: watermarking_scheme
      :value: None



   .. py:attribute:: attack_name
      :value: ''



   .. py:attribute:: watermarking_scheme_name
      :value: ''



   .. py:attribute:: gen_name


   .. py:method:: generate_text(prefixes, batch_size=1) -> list[str]

      Takes a list of input contexts and generates text using the model.

      Parameters:
      ----------
          prefixes: list
              A list of input contexts for text generation.
          batch_size: int
              The batch size to use for generation.

      Returns:
      ----------
          fake_articles: list
              A list of generated text.



   .. py:method:: set_attack_name(attack_name: str) -> None

      Public setter for the attack name.

      Parameters:
      ----------
          attack_name: str
              The name of the attack.



   .. py:method:: set_watermarking_scheme_name(watermarking_scheme_name: str) -> None

      Public setter for the watermarking scheme name.

      Parameters:
      ----------
          watermarking_scheme_name: str
              The name of the watermarking scheme.



   .. py:method:: generate_adversarial_text(prefixes: list, batch_size: int = 1) -> list[str]
      :abstractmethod:


      This is the adversarial version of text generation.
      All attack should generate text at some point. Either generate text in a specific way or modify the generated text.

      Parameters:
      ----------
          prefixes: list
              A list of input contexts for text generation.
          batch_size: int
              The batch size to use for generation.



